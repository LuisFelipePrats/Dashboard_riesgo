from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import pandas as pd
import sqlite3
import urllib.request
import os
import sys

app = Dash(__name__)

# URL de tu caja de datos en Google Drive
url = "https://drive.google.com/uc?export=download&id=1YfTmNvqU88XT7_ArGHC0YVlm9dgLVy1z"

try:
    # Bajar la caja de datos
    urllib.request.urlretrieve(url, 'temp_excel.xlsx')
    # Leer los datos y organizarlos
    df = pd.read_excel('temp_excel.xlsx', sheet_name='Ratios financieros')
    df.fillna(0, inplace=True)

    # Guardar en una cajita digital
    db_name = 'panel_riesgo.db'
    conn = sqlite3.connect(db_name)
    df.to_sql('datos_riesgo', conn, if_exists='replace', index=False)
    conn.close()

    # Cargar los datos para el tablero
    conn = sqlite3.connect(db_name)
    df_global = pd.read_sql_query("SELECT * FROM datos_riesgo", conn)
    conn.close()

    if df_global.empty:
        raise ValueError("No hay datos en la caja.")

    # Diseñar el tablero
    app.layout = html.Div([
        html.H1("Dashboard Financiero"),
        dcc.Dropdown(
            id='cliente-dropdown',
            options=[{'label': row['Cliente (Ordenado por colocación)'], 'value': idx} for idx, row in df_global.iterrows()],
            value=df_global.index[0]
        ),
        html.Div(id='output-div')
    ])

    # Hacer que el tablero cambie al elegir cliente
    @app.callback(
        Output('output-div', 'children'),
        Input('cliente-dropdown', 'value')
    )
    def update_output(value):
        selected = df_global.iloc[value]
        ventas_anuales = float(str(selected['Ventas anuales']).replace(',', ''))
        deuda_patrimonio = float(str(selected['Deuda/Patrimonio']).replace(',', ''))
        patrimonio = float(str(selected['Patrimonio']).replace(',', ''))
        razon_corriente = float(str(selected['Razón corriente']).replace(',', ''))
        margen = float(str(selected['Margen (resultado bruto)']).replace(',', ''))
        resultado_antes = float(str(selected['Resultado antes de impuestos']).replace(',', ''))
        resultado_despues = float(str(selected['Resultado después de impuestos']).replace(',', ''))
        gastos_financieros = float(str(selected['Gastos financieros']).replace(',', ''))
        liquidez_inmediata = float(str(selected['Liquidez Inmediata']).replace(',', ''))

        resumen = html.Div([
            html.H3(f"Cliente: {selected['Cliente (Ordenado por colocación)']}"),
            html.P(f"Ventas anuales: ${ventas_anuales:.2f}"),
            html.P(f"Deuda/Patrimonio: {deuda_patrimonio:.2f}"),
            html.P(f"Patrimonio: ${patrimonio:.2f}"),
            html.P(f"Razón corriente: {razon_corriente:.2f}"),
            html.P(f"Margen (resultado bruto): {margen:.2f}"),
            html.P(f"Resultado antes de impuestos: ${resultado_antes:.2f}"),
            html.P(f"Resultado después de impuestos: ${resultado_despues:.2f}"),
            html.P(f"Gastos financieros: ${gastos_financieros:.2f}"),
            html.P(f"Liquidez Inmediata: {liquidez_inmediata:.2f}")
        ], style={'columnCount': 2, 'padding': '10px'})

        fig_sales = px.bar(df_global, x='Cliente (Ordenado por colocación)', y='Ventas anuales',
                           title='Ventas Anuales por Cliente', height=400)

        fig_debt = px.pie(df_global, names='Cliente (Ordenado por colocación)', values='Deuda/Patrimonio',
                          title='Relación Deuda/Patrimonio por Cliente', height=400)

        return html.Div([resumen, dcc.Graph(figure=fig_sales), dcc.Graph(figure=fig_debt)])

except Exception as e:
    print(f"Error crítico: {e}", file=sys.stderr)
    sys.exit(1)

print("Intentando iniciar el servidor en 0.0.0.0:PORT...")
port = int(os.environ.get('PORT', 10000))
print(f"Iniciando servidor en 0.0.0.0:{port}...")
app.run(debug=True, host='0.0.0.0', port=port)
